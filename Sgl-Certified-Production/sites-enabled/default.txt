##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##


server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    return 301 https://sgl-labs.com$request_uri;
}


server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    server_name _;

    ssl_certificate /etc/letsencrypt/live/sglcertified.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/sglcertified.com/privkey.pem;

    return 301 https://sgl-labs.com$request_uri;
}








map $http_origin $cors_allowed {
    default         0;
    "https://admin.sglcertified.com"   1;
    "https://seller.sglcertified.com" 1;
    "https://www.sglcertified.com"     1;
}
# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }
}
server {
    server_name sglcertified.com;

   #root /var/www/html;

   # Add index.php to the list if you are using PHP
   #index index.html;

# Redirect all non-HTTPS traffic to https://www.sglcertified.com
        return 301 https://www.sglcertified.com$request_uri;


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/api.sglcertified.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.sglcertified.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}
server {

        root /var/www/api;

        # Add index.php to the list if you are using PHP
        index index.html;
        server_name api.sglcertified.com; # managed by Certbot

        # Set the allowed IP addresses here
        set $allowed_ip 0;

        # Andheri office
        if ($remote_addr = "116.72.105.207") {
                set $allowed_ip 1;
        }

        if ($remote_addr = "103.69.220.99") {
                set $allowed_ip 1;
        }

        location / {
                if ($cors_allowed = 1) {
                         set $allowed_ip 1;
                }

                # Allow requests from specified IPs or domains
                if ($allowed_ip = 0) {
                        # return 403;
                }

                proxy_pass       http://127.0.0.1:3000;
                proxy_set_header Host              $host;
                proxy_set_header X-Real-IP         $remote_addr;
                proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        }





    listen 443 ssl; # managed by Certbot
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_certificate /etc/letsencrypt/live/api.sglcertified.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.sglcertified.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot



}
# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.



server {
    if ($host = api.sglcertified.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        server_name api.sglcertified.com;
    listen 80;
    return 404; # managed by Certbot


}

server {
    if ($host = sglcertified.com) {
       return 301 https://www.sglcertified.com$request_uri; 
  } # managed by Certbot


    listen 80;
    server_name sglcertified.com;
    return 404; # managed by Certbot


}

